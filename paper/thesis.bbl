\begin{thebibliography}{10}

\bibitem{c_static_init}
\url{https://en.cppreference.com/w/c/language/initialization}.

\bibitem{cpp_static_init}
\url{https://en.cppreference.com/w/cpp/language/initialization}.

\bibitem{java_android_optimizers}
\url{http://www.comscigate.com/tutorial/ajay/Part\%202/Development\%20for\%20Mobile\%20Devices/Software/proguard2.1/proguard2.1/docs/alternatives.html}.

\bibitem{java_reflection}
\url{http://www.oracle.com/technetwork/articles/java/javareflection-1536171.html}.

\bibitem{language_benchmarks}
\url{https://github.com/trizen/language-benchmarks}.

\bibitem{classfile_sections}
\url{https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-4.html}.

\bibitem{instruction_format}
\url{https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html}.

\bibitem{java_main}
\url{https://docs.oracle.com/javase/tutorial/getStarted/application/index.html#MAIN}.

\bibitem{javap}
\url{https://docs.oracle.com/javase/7/docs/technotes/tools/windows/javap.html}.

\bibitem{arnold2006dynamic}
Matthew Arnold, Stephen Fink, David Grove, and Michael Hind.
\newblock Dynamic compilation and adaptive optimization in virtual machines.
\newblock 2006.

\bibitem{the_halting_problem}
L~Burkholder.
\newblock The halting problem.
\newblock {\em SIGACT News}, 18(3):48--60, April 1987.

\bibitem{cpu_and_gpu_trends}
{Colin Gillespie}.
\newblock {CPU and GPU trends over time}.
\newblock
  \url{https://csgillespie.wordpress.com/2011/01/25/cpu-and-gpu-trends-over-time/}.

\bibitem{memory_trends}
K.~Goda and M.~Kitsuregawa.
\newblock The history of storage systems.
\newblock {\em Proceedings of the IEEE}, 100(Special Centennial
  Issue):1433--1440, May 2012.

\bibitem{proguard_google}
{Goole}.
\newblock {Deadcode elimination}.
\newblock
  \url{https://developers.google.com/j2objc/guides/dead-code-elimination}.
\newblock [Online; accessed 4-June-2018].

\bibitem{proguard}
{Guard Square}.
\newblock {ProGuard}.
\newblock \url{https://www.guardsquare.com/en/proguard}, 2016.
\newblock [Online; accessed 4-June-2018].

\bibitem{c_enable_optimization}
Eljay Love-Jensen.
\newblock Removing unused functions/dead code.
\newblock \url{https://gcc.gnu.org/ml/gcc-help/2003-08/msg00128.html}.

\bibitem{java_invokedynamic}
Oracle.
\newblock
  \url{https://docs.oracle.com/javase/8/docs/technotes/guides/vm/multiple-language-support.html}.

\bibitem{deadcodeeliminationforbeginners}
{Rob Sayre}.
\newblock {Dead code elimination for beginners}.
\newblock
  \url{http://chris.improbable.org/2010/11/17/dead-code-elimination-for-beginners/},
  2010.
\newblock [Online; accessed 4-June-2018].

\bibitem{moores_law}
Robert~R. Schaller.
\newblock Moore's law: Past, present, and future.
\newblock {\em IEEE Spectr.}, 34(6):52--59, June 1997.

\bibitem{wiki:deadcodeelimination}
{Wikipedia contributors}.
\newblock Dead code elimination --- {Wikipedia}{,} the free encyclopedia.
\newblock
  \url{https://en.wikipedia.org/w/index.php?title=Dead_code_elimination&oldid=841070703},
  2018.
\newblock [Online; accessed 4-June-2018].

\end{thebibliography}
